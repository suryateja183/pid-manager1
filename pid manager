#include<stdio.h>
#include<pthread.h>
#include<fcntl.h>
#include<sys/types.h>
#include<sys/stat.h>
#include<unistd.h>
#include<stdlib.h>
#define MIN 100
#define MAX 1000
int count=1,count1=0;
int status[MAX-MIN];
int pid[MAX-MIN];
int allocate_map()
{
int i;
for(i=MIN;i<=MAX;i++)
{
status[i]=0;
pid[i]=i;
return 1;
}
}
int *allocate_pid()
{
int i,t;
for(i=MIN;i<=MAX;i++)
{
if(status[i]==0)
{
status[i]=1;
printf("the process %d has allocated to adress %d\n",count,pid[i]);
count1=1;
return pid[i];
}
}
if(count1==0)
{
printf("pid cannot be assigned\n");
return -1;
}
}
void release(int j)
{
status[j]=0;
printf("process having pid %d has released\n",pid[j]);
}
int main()
{
int a,i;
allocate_map();
printf("enter no of threads\n");
scanf("%d",&a);
pthread_t b;
for(i=1;i<=a;i++)
{
pthread_create(&b,NULL,allocate_pid,NULL);
pthread_join(b,NULL);
}
int t;
t=rand()%10;
printf("%d",t);
sleep(t);
release(pid[i]);
}
